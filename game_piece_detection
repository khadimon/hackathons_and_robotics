import cv2
import numpy as np


def detect_game_pieces(frame):
    # Convert to HSV color space
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define white color range
    lower_white = np.array([0, 0, 200])  # High value (brightness), low saturation
    upper_white = np.array([180, 30, 255])  # Cover all hues, low saturation, high value

    # Create mask for white objects
    mask = cv2.inRange(hsv, lower_white, upper_white)

    # Add some blur to reduce noise
    mask = cv2.GaussianBlur(mask, (5, 5), 0)

    # Find contours
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # If any white object is found
    if contours:
        # Get the largest white object
        largest_contour = max(contours, key=cv2.contourArea)
        if cv2.contourArea(largest_contour) > 500:  # Minimum size threshold
            x, y, w, h = cv2.boundingRect(largest_contour)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)  # Draw rectangle around object
            return x + w // 2  # Return center x-coordinate of the object
    return None


def determine_movement(object_x, frame_width):
    # Define the center zone width
    center_zone = 100  # pixels
    frame_center = frame_width // 2

    if object_x is None:
        print("Command: Searching - No white object detected")
        return

    # Determine movement based on object position
    if object_x < frame_center - center_zone:
        print("Command: Turn Left")
    elif object_x > frame_center + center_zone:
        print("Command: Turn Right")
    else:
        print("Command: Move Forward")


def main():
    # Initialize camera
    cap = cv2.VideoCapture(0)

    # Check if camera opened successfully
    if not cap.isOpened():
        print("Error: Could not open camera")
        return

    print("Camera initialized successfully. Press 'q' to quit.")

    while True:
        # Capture frame
        ret, frame = cap.read()
        if not ret:
            print("Error: Can't receive frame")
            break

        # Get frame dimensions
        frame_height, frame_width = frame.shape[:2]

        # Draw center lines for reference
        center_x = frame_width // 2
        cv2.line(frame, (center_x, 0), (center_x, frame_height), (0, 255, 0), 2)  # Center line
        cv2.line(frame, (center_x - 50, 0), (center_x - 50, frame_height), (0, 255, 0), 1)  # Left boundary
        cv2.line(frame, (center_x + 50, 0), (center_x + 50, frame_height), (0, 255, 0), 1)  # Right boundary

        # Detect white object
        object_x = detect_game_pieces(frame)

        # If object detected, draw center point
        if object_x is not None:
            cv2.circle(frame, (object_x, frame_height // 2), 10, (0, 0, 255), -1)

        # Determine and print movement command
        determine_movement(object_x, frame_width)

        # Display the original frame
        cv2.imshow('Game Piece Detection', frame)

        # Break loop with 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Clean up
    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
